{"version":3,"sources":["generateRandomNPC.js","App.js","serviceWorker.js","index.js"],"names":["genderTable","genderNamesTable","1","2","3","4","feature1Table","feature1NamesTable","5","6","feature2Table","feature2NamesTable","7","8","9","10","raceTable","generateRandomNumber","dice","min","max","Math","floor","random","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","npcs","npcsList","reverse","map","npc","name","race","gender","feature1","feature2","id","concat","react_default","a","createElement","key","className","onClick","handleGenerate","bind","raceRoll","genderRoll","genderName","feature1Roll","feature1Name","feature2Roll","feature2Name","generateRandomNPC","push","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAMA,EAAc,CAAC,OAAQ,SAAU,OAAQ,UAEzCC,EAAmB,CACvBC,EAAG,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/CC,EAAG,CAAC,OAAQ,MAAO,KAAM,MAAO,MAAO,MAAO,MAAO,OACrDC,EAAG,CAAC,KAAM,KAAM,KAAM,KAAM,OAAQ,MAAO,KAAM,OACjDC,EAAG,CAAC,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,QAG7CC,EAAgB,CACpB,+BACA,oCACA,iCACA,oBACA,mBACA,8BAEIC,EAAqB,CACzBL,EAAG,CAAC,OAAQ,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACjDC,EAAG,CAAC,MAAO,MAAO,KAAM,KAAM,KAAM,MAAO,MAAO,OAClDC,EAAG,CAAC,QAAS,MAAO,KAAM,KAAM,KAAM,MAAO,MAAO,OACpDC,EAAG,CAAC,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,MAAO,MACjDG,EAAG,CAAC,OAAQ,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,KAClDC,EAAG,CAAC,MAAO,OAAQ,KAAM,KAAM,KAAM,KAAM,MAAO,OAG9CC,EAAgB,CACpB,eACA,eACA,2BACA,iBACA,gBACA,yBACA,WACA,cACA,cACA,yBAGIC,EAAqB,CACzBT,EAAG,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,MAAO,OACvDC,EAAG,CAAC,OAAQ,OAAQ,MAAO,MAAO,KAAM,MAAO,MAAO,OACtDC,EAAG,CAAC,MAAO,OAAQ,MAAO,OAAQ,MAAO,MAAO,MAAO,OACvDC,EAAG,CAAC,MAAO,KAAM,MAAO,MAAO,OAAQ,MAAO,OAAQ,OACtDG,EAAG,CAAC,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,OACvDC,EAAG,CAAC,MAAO,MAAO,MAAO,KAAM,MAAO,OAAQ,MAAO,OACrDG,EAAG,CAAC,QAAS,OAAQ,MAAO,KAAM,KAAM,OAAQ,MAAO,MACvDC,EAAG,CAAC,OAAQ,MAAO,MAAO,KAAM,OAAQ,MAAO,MAAO,OACtDC,EAAG,CAAC,OAAQ,OAAQ,MAAO,MAAO,KAAM,MAAO,MAAO,OACtDC,GAAI,CAAC,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAInDC,EAAY,CAAC,QAAS,MAAO,WAAY,QAAS,QAAS,QAAS,WAAY,YAMtF,IAAMC,EAAuB,SAACC,GAC5B,OALoBC,EAKA,EALKC,EAKFF,EAJhBG,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EADvD,IAAsBA,EAAKC,GCDZI,qBAjDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,KAAM,IAJIR,wEAOL,IAGDS,EAFWN,KAAKI,MAAdC,KAEcE,UAAUC,IAAI,SAACC,GAAQ,IACnCC,EAA2CD,EAA3CC,KAAMC,EAAqCF,EAArCE,KAAMC,EAA+BH,EAA/BG,OAAQC,EAAuBJ,EAAvBI,SAAUC,EAAaL,EAAbK,SAChCC,EAAE,GAAAC,OAAMN,GACd,OAAQO,EAAAC,EAAAC,cAAA,MAAIC,IAAKL,GACfE,EAAAC,EAAAC,cAAA,SACGT,EADH,MACYC,EADZ,MACqBC,GAErBK,EAAAC,EAAAC,cAAA,SACGN,EADH,MACgBC,MAKpB,OACEG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAStB,KAAKuB,eAAeC,KAAKxB,OAA1C,qBAEFiB,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,UACKb,8CAST,IAAMG,EDmBuB,WAG/B,IAAMgB,EAAWpC,EAAqB,GAChCsB,EAAOvB,EAAUqC,EAAW,GAG5BC,EAAarC,EAAqB,GAClCuB,EAASxC,EAAYsD,EAAa,GAClCC,EAAatD,EAAiBqD,GAAYD,EAAW,GAGrDG,EAAevC,EAAqB,GACpCwB,EAAWnC,EAAckD,EAAe,GACxCC,EAAelD,EAAmBiD,GAAcH,EAAW,GAI3DK,EAAezC,EAAqB,IACpCyB,EAAWhC,EAAcgD,EAAe,GACxCC,EAAehD,EAAmB+C,GAAcL,EAAW,GAIjE,MAAO,CACLf,KAHQ,GAAAM,OAAMe,GAANf,OAAqBa,GAArBb,OAAoCW,GAI5ChB,OACAC,SACAC,WACAC,YChDYkB,GACJ3B,EAASL,KAAKI,MAAdC,KACRA,EAAK4B,KAAKxB,GACVT,KAAKkC,SAAS,CACZ7B,gBA7CY8B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1061f708.chunk.js","sourcesContent":["const genderTable = ['Male', 'Female', 'Male', 'Female'];\r\n\r\nconst genderNamesTable = {\r\n  1: ['rut', 'en', 'os', 'an', 'in', 'ak', 'il', 'ik'],\r\n  2: ['lynn', 'lia', 'ra', 'ley', 'ina', 'eth', 'lia', 'nor'],\r\n  3: ['li', 'al', 'er', 'as', 'riel', 'urt', 'on', 'org'],\r\n  4: ['na', 'aya', 'yn', 'na', 'ila', 'na', 'tha', 'gri']\r\n}\r\n\r\nconst feature1Table = [\r\n  'Tattooed / Pierced / Unusual',\r\n  'Long / Large / Loud / Extravagant',\r\n  'Short / Small / Quiet / Simple',\r\n  'Missing / Injured',\r\n  'Beautiful / Ugly',\r\n  'Colourful / Dyed / Painted'];\r\n\r\nconst feature1NamesTable = {\r\n  1: ['omma', 'ryl', null, null, null, 'li', 'tu', 'og'],\r\n  2: ['ogg', 'tha', null, null, null, 'mer', 'ana', 'oto'],\r\n  3: ['osgra', 'ina', 'ow', null, null, 'wun', 'dra', 'ust'],\r\n  4: ['ed', 'ala', 'em', null, null, 'men', 'ado', null],\r\n  5: ['tirl', 'yni', null, null, null, 'alv', 'la', 'g'],\r\n  6: ['wod', 'arun', null, null, null, 'ip', 'reg', 'ak']\r\n}\r\n\r\nconst feature2Table = [\r\n  'Nose / Voice',\r\n  'Eyes / Stare',\r\n  'Beard / Hair / Sideburns',\r\n  'Ears / Hearing',\r\n  'Mouth / Laugh',\r\n  'Head / Forehead / Face',\r\n  'Clothing',\r\n  'Skin / Scar',\r\n  'Shoes / Hat',\r\n  'Teeth / Nails / Hands'\r\n];\r\n\r\nconst feature2NamesTable = {\r\n  1: ['Dal', 'Taer', 'Mar', 'Dyl', 'Eth', 'Clad', 'Gal', 'Bok'],\r\n  2: ['Hour', 'Keth', 'Dan', 'Eth', 'La', 'Ged', 'Ari', 'Gun'],\r\n  3: ['Kal', 'Elin', 'San', 'Jord', 'Gab', 'Dap', 'Fae', 'Ton'],\r\n  4: ['Gat', 'Ay', 'Tar', 'Gab', 'Zach', 'Jip', 'Avil', 'Tar'],\r\n  5: ['Brot', 'Lae', 'Wil', 'Zach', 'Hay', 'Cos', 'Tyr', 'Kez'],\r\n  6: ['Har', 'Sil', 'Fin', 'Al', 'Dyl', 'Glon', 'Yen', 'Vug'],\r\n  7: ['Strom', 'Arth', 'Elk', 'La', 'Iv', 'Smid', 'Rad', 'No'],\r\n  8: ['Glor', 'Sca', 'Jop', 'Iv', 'Jord', 'Jen', 'Ven', 'Kir'],\r\n  9: ['Thog', 'Evin', 'Ric', 'Kar', 'Al', 'Tin', 'Lan', 'Bro'],\r\n  10: ['Demm', 'Kyr', 'Bel', 'Hay', 'Kar', 'Deb', 'Dan', 'Gor']\r\n}\r\n\r\n\r\nconst raceTable = ['Dwarf', 'Elf', 'Halfling', 'Human', 'Human', 'Gnome', 'Half-Elf', 'Half-Orc'];\r\n\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst generateRandomNumber = (dice) => {\r\n  return getRandomInt(1, dice);\r\n}\r\n\r\n// const { name, race, gender, feature1, feature2 } = npc;\r\nexport const generateRandomNPC = () => {\r\n\r\n  // race\r\n  const raceRoll = generateRandomNumber(8);\r\n  const race = raceTable[raceRoll - 1];\r\n\r\n  // gender\r\n  const genderRoll = generateRandomNumber(4);\r\n  const gender = genderTable[genderRoll - 1];\r\n  const genderName = genderNamesTable[genderRoll][raceRoll - 1];\r\n\r\n  // feature1\r\n  const feature1Roll = generateRandomNumber(6);\r\n  const feature1 = feature1Table[feature1Roll - 1];\r\n  const feature1Name = feature1NamesTable[feature1Roll][raceRoll - 1];\r\n\r\n\r\n  // feature2\r\n  const feature2Roll = generateRandomNumber(10);\r\n  const feature2 = feature2Table[feature2Roll - 1];\r\n  const feature2Name = feature2NamesTable[feature2Roll][raceRoll - 1];\r\n\r\n  const name = `${feature2Name}${feature1Name}${genderName}`;\r\n\r\n  return {\r\n    name,\r\n    race,\r\n    gender,\r\n    feature1,\r\n    feature2\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport { generateRandomNPC } from './generateRandomNPC';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      npcs: []\n    }\n  }\n  render() {\n    const { npcs } = this.state;\n\n    const npcsList = npcs.reverse().map((npc) => {\n      const { name, race, gender, feature1, feature2 } = npc;\n      const id = `${name}`;\n      return (<li key={id}>\n        <p>\n          {name} - {race} - {gender}\n        </p>\n        <p>\n          {feature1} - {feature2}\n        </p>\n\n      </li>);\n    })\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={this.handleGenerate.bind(this)}>Generate new NPC</button>\n        </div>\n        <div>\n          NPCs:\n        <ul>\n            {npcsList}\n          </ul>\n\n        </div>\n      </div>\n    );\n  }\n\n  handleGenerate() {\n    const npc = generateRandomNPC();\n    const { npcs } = this.state;\n    npcs.push(npc);\n    this.setState({\n      npcs\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}